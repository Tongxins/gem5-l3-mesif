
/*
 * Copyright (c) 1999-2005 Mark D. Hill and David A. Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * $Id: MOESI_CMP_token-dir.sm 1.6 05/01/19 15:48:35-06:00 mikem@royal16.cs.wisc.edu $
 */


machine(Directory, "MESIF Caching Agent + Home Agent") 
 : DirectoryMemory * directory,
   MemoryControl * memBuffer,
   int to_mem_ctrl_latency = 1,
   int directory_latency = 6,
int id,
   int nodes
{

  MessageBuffer requestToDir, network="From", virtual_network="0", ordered="false", vnet_type="request";
  MessageBuffer responseToDir, network="From", virtual_network="1", ordered="false", vnet_type="response";

  MessageBuffer requestFromDir, network="To", virtual_network="0", ordered="false", vnet_type="request";
  MessageBuffer responseFromDir, network="To", virtual_network="1", ordered="false", vnet_type="response";

  // STATES
  state_declaration(State, desc="Directory states", default="Directory_State_I") {
    // Base states
    MH, AccessPermission:Read_Only, desc="";
    EH, AccessPermission:Read_Only, desc="";
    IH, AccessPermission:Read_Write, desc=""; //this has to be Read_Write, or else simulation fails
    SH, AccessPermission:Read_Only, desc="";
    FH, AccessPermission:Read_Only, desc="";
    M, AccessPermission:Read_Only, desc="";
    MR, AccessPermission:Read_Only, desc="";
    E, AccessPermission:Read_Only, desc="";
    I, AccessPermission:Read_Write, desc=""; //this has to be Read_Write, or else simulation fails
    S, AccessPermission:Read_Only, desc="";
    F, AccessPermission:Read_Only, desc="";
    FR, AccessPermission:Read_Only, desc="";
    FM_H, AccessPermission:Read_Only, desc="";
    MI_L3, AccessPermission:Read_Only, desc="";
    MS_L3, AccessPermission:Read_Only, desc="";
    MHS_L3, AccessPermission:Read_Only, desc="";

    IM_M, AccessPermission:Busy, desc="";
    ID_W, AccessPermission:Busy, desc="";
    E_DWR, AccessPermission:Busy, desc="";
    E_DWRI, AccessPermission:Busy, desc="";
FHI_R,  AccessPermission:Busy, desc="";
FHI_RC,  AccessPermission:Busy, desc="";
FHI_RC_M,  AccessPermission:Busy, desc="";
    M_DWR, AccessPermission:Busy, desc="";
    M_DWRI, AccessPermission:Busy, desc="";
    M_DRD, AccessPermission:Busy, desc="";
    M_DRDI, AccessPermission:Busy, desc="";
    E_DRD, AccessPermission:Busy, desc="";
    E_DRDI, AccessPermission:Busy, desc="";
    ID, AccessPermission:Busy, desc="";
    IMS_M, AccessPermission:Busy, desc="";
    XI_M, AccessPermission:Busy, desc="";
    IE_M, AccessPermission:Busy, desc="";
    XI_H, AccessPermission:Busy, desc="";
    IF_M, AccessPermission:Busy, desc="";
    IM_S, AccessPermission:Busy, desc="";
    IF_S, AccessPermission:Busy, desc="";
    SI_L3, AccessPermission:Busy, desc="";
  }

  // Events
  enumeration(Event, desc="Directory events") {
    GETX_H, desc="GETX from local L3, we're home node for this line";
    GETS_H, desc="GETS from local L3, we're home node for this line";
    GETS_O, desc="GETS from local L3, other node is a home node for this line";
    GETX_O, desc="GETX from local L3, other node is a home node for this line";
    GETS_S, desc="GETS from local L3, other node is a home node for this line";
    GETX_S, desc="GETX from local L3, other node is a home node for this line";
    GETS_RL, desc="GETS from other CA/DIR, we are home node for this line";
    GETS_RO, desc="GETS from other CA/DIR, we are home node for this line";
    GETX_RL, desc="GETX from other CA/DIR, we are home node for this line";
    GETX_RO, desc="GETX from other CA/DIR, we are home node for this line";
    GETX_RL_NO_SHARERS, desc="GETX from other CA/DIR, we are home node for this line";
    GETX_RL_NO_SHARERS_F, desc="GETX from other CA/DIR, we are home node for this line";
    WB_Data_Local, desc="writeback data arrives from L3";
    WB_Data_Local_O, desc="writeback data arrives from L3";
    WB_Data_CA, desc="writeback data arrives from L3";
    WB_Ack_Local, desc="writeback ack arrives from L3";
    WB_Ack_CA, desc="writeback ack arrives from L3";
    Memory_Data, desc="Fetched data from memory arrives";
    Memory_Ack_Local, desc="Writeback Ack from memory arrives";
    Memory_Ack_CA, desc="Writeback Ack from memory arrives";
    Memory_Inv, desc="Writeback Ack from memory arrives";
//added by SS for dma
    DMA_READ, desc="A DMA Read memory request";
    DMA_WRITE, desc="A DMA Write memory request";
    Data_Home, desc="Clean Replacement in L3 cache";
    Data_CA, desc="Clean Replacement in L3 cache";
    Ack_Home, desc="Clean Replacement in L3 cache";
    Data, desc="Clean Replacement in L3 cache";
    Response, desc="";
    Conflict, desc="";
    End_Conflict, desc="";
    End_Request, desc="";
Last_Response, desc="";
  }

  // TYPES

  // DirectoryEntry
  structure(Entry, desc="...", interface="AbstractEntry") {
    State DirectoryState,          desc="Directory state";
    DataBlock DataBlk,             desc="data for the block";
    NetDest Sharers,                   desc="Sharers for this block";
    NetDest Owner,                     desc="Owner of this block";
    MachineID Forwarder, 			desc="Forwarder";
  }

  // TBE entries for DMA requests
  structure(TBE, desc="TBE entries for outstanding DMA requests") {
    Address PhysicalAddress, desc="physical address";
    State TBEState,        desc="Transient State";
    DataBlock DataBlk,     desc="Data to be written (DMA write only)";
    MachineID requestor,	   desc="...";
    int Len,               desc="...";
  }
    
  structure(TBETable, external="yes") {
    TBE lookup(Address);  
    void allocate(Address); 
    void deallocate(Address);
    bool isPresent(Address);
  } 


  // ** OBJECTS **

  TBETable TBEs, template_hack="<Directory_TBE>";

  void set_tbe(TBE tbe);
  void unset_tbe();
  void wakeUpBuffers(Address a);
      
  Entry getDirectoryEntry(Address addr), return_by_pointer="yes" {
    Entry dir_entry := static_cast(Entry, "pointer", directory[addr]);

    if (is_valid(dir_entry)) {
      return dir_entry;
    }

    dir_entry :=  static_cast(Entry, "pointer",
                              directory.allocate(addr, new Entry));
    return dir_entry;
  }

  State getState(TBE tbe, Address addr) {
    if (is_valid(tbe)) {
      return tbe.TBEState;   
    } else if (directory.isPresent(addr)) {
      return getDirectoryEntry(addr).DirectoryState;
    } else {
      return State:I;
    }
  }
   

  void setState(TBE tbe, Address addr, State state) {

    if (is_valid(tbe)) {
      tbe.TBEState := state;
    }
  
    if (directory.isPresent(addr)) {
  
      if (state == State:I)  {
        assert(getDirectoryEntry(addr).Owner.count() == 0);
        assert(getDirectoryEntry(addr).Sharers.count() == 0);
      } else if (state == State:M) {
        assert(getDirectoryEntry(addr).Owner.count() == 1);
        assert(getDirectoryEntry(addr).Sharers.count() == 0);
      }
      
      getDirectoryEntry(addr).DirectoryState := state;
    }
  }

  AccessPermission getAccessPermission(Address addr) {
    TBE tbe := TBEs[addr];
    if(is_valid(tbe)) {
      DPRINTF(RubySlicc, "%s\n", Directory_State_to_permission(tbe.TBEState));
      return Directory_State_to_permission(tbe.TBEState);
    }

    if(directory.isPresent(addr)) {
      DPRINTF(RubySlicc, "%s\n", Directory_State_to_permission(getDirectoryEntry(addr).DirectoryState));
      return Directory_State_to_permission(getDirectoryEntry(addr).DirectoryState);
    }

    DPRINTF(RubySlicc, "%s\n", AccessPermission:NotPresent);
    return AccessPermission:NotPresent;
  }

  DataBlock getDataBlock(Address addr), return_by_ref="yes" {
    return getDirectoryEntry(addr).DataBlk;
  }

  void setAccessPermission(Address addr, State state) {
    if (directory.isPresent(addr)) {
      getDirectoryEntry(addr).changePermission(Directory_State_to_permission(state));
    }
  }

  bool isGETRequest(CoherenceRequestType type) {
    return (type == CoherenceRequestType:GETS) ||
      (type == CoherenceRequestType:GETX);
  }

  bool isHome(Address address) {
     DPRINTF(RubySlicc, "isHOME: %s %s\n", map_Address_to_Directory(address),  idToMachineID(MachineType:Directory, id));
     return map_Address_to_Directory(address) == idToMachineID(MachineType:Directory, id);
  }

  Event mapReqEventToHomeEvent(CoherenceRequestType type, bool L3, RequestMsg in_msg) {
	if (L3) {
		if (type ==  CoherenceRequestType:GETS) {
			return Event:GETS_H;
		} else if (type == CoherenceRequestType:GETX) {
			return Event:GETX_H;
		} else if (type == CoherenceRequestType:DMA_WRITE) {
			return Event:DMA_WRITE;
		} else if (type == CoherenceRequestType:DMA_READ) {
			return Event:DMA_READ;
		} else {
			error("Bad request\n");
		}
	} else {
//TODO proper events
		if (type ==  CoherenceRequestType:GETS) {
			return Event:GETS_RO;
		} else if (type == CoherenceRequestType:GETX) {
				DPRINTF(RubySlicc, "sharers: %s forwarder: %s\n", getDirectoryEntry(in_msg.Address).Sharers,
				        getDirectoryEntry(in_msg.Address).Forwarder);
				if (getDirectoryEntry(in_msg.Address).Forwarder == in_msg.Requestor) {
					//sharer is
					return Event:GETX_RL_NO_SHARERS_F;
				}
				if (getDirectoryEntry(in_msg.Address).Sharers.count() == 0) {
					return Event:GETX_RL_NO_SHARERS;
				} else {
					return Event:GETX_RL;
				}
		} else if (type == CoherenceRequestType:DMA_WRITE) {
			return Event:DMA_WRITE;
		} else if (type == CoherenceRequestType:DMA_READ) {
			return Event:DMA_READ;
		} else {
			error("bad request");
		}
	}
  }

  Event mapReqEventToNonHomeEvent(CoherenceRequestType type, bool fromDir) {
	if (fromDir) {
		if (type ==  CoherenceRequestType:GETS) {
			return Event:GETS_S;
		} else if (type == CoherenceRequestType:GETX) {
			return Event:GETX_S;
		} else {
			error("Bad request\n");
		}

	}
	else {
		if (type ==  CoherenceRequestType:GETS) {
			return Event:GETS_O;
		} else if (type == CoherenceRequestType:GETX) {
			return Event:GETX_O;
		} else {
			error("Bad request\n");
		}
  }	}

  // ** OUT_PORTS **
  out_port(responseNetwork_out, ResponseMsg, responseFromDir);
  out_port(requestNetwork_out, RequestMsg, requestFromDir);
  out_port(memQueue_out, MemoryMsg, memBuffer);

  // ** IN_PORTS **

  in_port(requestNetwork_in, RequestMsg, requestToDir, rank = 0) {
    if (requestNetwork_in.isReady()) {
      peek(requestNetwork_in, RequestMsg) {
	DPRINTF(RubySlicc, "%s\n", in_msg);
        assert(in_msg.Destination.isElement(machineID));
        if (isHome(in_msg.Address)) {
		trigger(mapReqEventToHomeEvent(in_msg.Type, machineIDToMachineType(in_msg.Requestor) == MachineType:L3Cache, in_msg), in_msg.Address, TBEs[in_msg.Address]);
	} else {
		trigger(mapReqEventToNonHomeEvent(in_msg.Type, machineIDToMachineType(in_msg.Requestor) == MachineType:Directory), in_msg.Address, TBEs[in_msg.Address]);
	}
    }
  }}

  in_port(responseNetwork_in, ResponseMsg, responseToDir, rank = 1) {
    if (responseNetwork_in.isReady()) {
      peek(responseNetwork_in, ResponseMsg) {
        assert(in_msg.Destination.isElement(machineID));
        if (in_msg.Type == CoherenceResponseType:MEMORY_DATA) {
          trigger(Event:Data_Home, in_msg.Address, TBEs[in_msg.Address]);
        } else if (in_msg.Type == CoherenceResponseType:RESPONSE_DATA) {
          trigger(Event:Data, in_msg.Address, TBEs[in_msg.Address]);
        } else if (in_msg.Type == CoherenceResponseType:RESPONSE) {
          trigger(Event:Response, in_msg.Address, TBEs[in_msg.Address]);
        } else if (in_msg.Type == CoherenceResponseType:END_REQUEST) {
          trigger(Event:End_Request, in_msg.Address, TBEs[in_msg.Address]);
        } else if (in_msg.Type == CoherenceResponseType:ACK) {
assert(false);
        } else if (in_msg.Type == CoherenceResponseType:WRITEBACK_DIRTY_DATA) {
		if (machineIDToMachineType(in_msg.Sender) == MachineType:Directory) {
          		trigger(Event:WB_Data_CA, in_msg.Address, TBEs[in_msg.Address]);
		} else {
			if (isHome(in_msg.Address)) {
	          		trigger(Event:WB_Data_Local, in_msg.Address, TBEs[in_msg.Address]);
			} else {
	          		trigger(Event:WB_Data_Local_O, in_msg.Address, TBEs[in_msg.Address]);
			}
		}
        } else if (in_msg.Type == CoherenceResponseType:WRITEBACK_CLEAN_ACK) {
		if (machineIDToMachineType(in_msg.Sender) == MachineType:Directory) {
			assert(isHome(in_msg.Address));
			if (getState(TBEs[in_msg.Address], in_msg.Address) == State:F) {
				assert(getDirectoryEntry(in_msg.Address).Forwarder == in_msg.Sender);
				if (getDirectoryEntry(in_msg.Address).Sharers.count() > 0) {
					//There are other sharers to transfer the F state to
					if (getDirectoryEntry(in_msg.Address).Sharers.isElement(machineID)) {
//		          			trigger(Event:WB_Ack_CA_is_Sharer, in_msg.Address, TBEs[in_msg.Address]);
					} else {
//		          			trigger(Event:WB_Ack_CA, in_msg.Address, TBEs[in_msg.Address]);
					}
				} else {
	          			trigger(Event:WB_Ack_CA, in_msg.Address, TBEs[in_msg.Address]);
				}
			} else {
	          		trigger(Event:WB_Ack_CA, in_msg.Address, TBEs[in_msg.Address]);
			}
		} else {
          		trigger(Event:WB_Ack_Local, in_msg.Address, TBEs[in_msg.Address]);
		}
        } else if (in_msg.Type == CoherenceResponseType:MEMORY_ACK) {
	  assert(machineIDToMachineType(in_msg.Sender) == MachineType:Directory);
          trigger(Event:Memory_Ack_CA, in_msg.Address, TBEs[in_msg.Address]);
        } else if (in_msg.Type == CoherenceResponseType:INV) {
			assert(isHome(in_msg.Address) == false);
          trigger(Event:Memory_Inv, in_msg.Address, TBEs[in_msg.Address]);
	} else {
          DPRINTF(RubySlicc, "%s\n", in_msg.Type);
          error("Invalid message");
        }
      }
    }
  }

  // off-chip memory request/response is done
  in_port(memQueue_in, MemoryMsg, memBuffer, rank = 2) {
    if (memQueue_in.isReady()) {
      peek(memQueue_in, MemoryMsg) {
        if (in_msg.Type == MemoryRequestType:MEMORY_READ) {
          trigger(Event:Memory_Data, in_msg.Address, TBEs[in_msg.Address]);
        } else if (in_msg.Type == MemoryRequestType:MEMORY_WB) {
          trigger(Event:Memory_Ack_Local, in_msg.Address, TBEs[in_msg.Address]);
        } else {
          DPRINTF(RubySlicc, "%s\n", in_msg.Type);
          error("Invalid message");
        }
      }
    }
  }


  action (srt_setTBERequestor, "srt", desc="") {
	peek(requestNetwork_in, RequestMsg) {
	tbe.requestor := in_msg.Requestor;
}
  }


  action (srtr_setTBERequestorFromResp, "srtr", desc="") {
	peek(responseNetwork_in, ResponseMsg) {
	tbe.requestor := in_msg.Sender;
}
  }
  // Actions
  action(a_sendAck, "a", desc="Send ack to L2") {
    peek(responseNetwork_in, ResponseMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:MEMORY_ACK;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Sender);
        out_msg.MessageSize := MessageSizeType:Response_Control;
      }
    }
  }

  action(drp_sendDMAData, "drp", desc="Send Data to DMA controller from incoming PUTX") {
    peek(responseNetwork_in, ResponseMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:DATA;
        out_msg.DataBlk := in_msg.DataBlk;   // we send the entire data block and rely on the dma controller to split it up if need be
        out_msg.Destination.add(map_Address_to_DMA(address));
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(aq_sendAckFromReq, "aq", desc="Send ack to L2") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := in_msg.Address;
        out_msg.Type := CoherenceResponseType:MEMORY_ACK;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Response_Control;
      }
    }
  }

  action(d_sendData, "d", desc="Send data to requestor") {
    peek(memQueue_in, MemoryMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:MEMORY_DATA;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.OriginalRequestorMachId);
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.Dirty := false;
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(do_sendDataToOwner, "do", desc="Send data to requestor") {
    peek(memQueue_in, MemoryMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:MEMORY_DATA;
        out_msg.Sender := machineID;
        out_msg.Destination := getDirectoryEntry(in_msg.Address).Owner;
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.Dirty := false;
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(dos_saveDataFromMemory, "dos", desc="Send data to requestor") {
    peek(memQueue_in, MemoryMsg) {
	getDirectoryEntry(address).DataBlk := in_msg.DataBlk;
    }
  }

  action(cc_sendConflictToHome, "cc", desc="123") {
  }

  action(ce_sendEndConflictToHome, "ce", desc="123") {
  }

  action(s_sendSnoopToCA, "s", desc="123") {
  }

  action(gd_getSharedDataFromLocalOwner, "gd", desc="123") {
  }

  action(sd_sendDataFromReq, "sd", desc="123") {
  }

  action(d_sendDataToTBERequestor, "ds", desc="Send data to requestor") {
    peek(responseNetwork_in, ResponseMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:MEMORY_DATA;
        out_msg.Sender := machineID;
        out_msg.Destination.add(tbe.requestor);
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.Dirty := in_msg.Dirty;
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(dt_sendDataToTBERequestorFromTBE, "dt", desc="") {
}

   action(da_sendMemAckToTBERequestor, "da", desc="Send data to requestor") {
    peek(responseNetwork_in, ResponseMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:MEMORY_ACK;
        out_msg.Sender := machineID;
        out_msg.Destination.add(tbe.requestor);
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.Dirty := in_msg.Dirty;
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(cdf_conditionalDeforwardify, "cdf", desc="") {
	peek(responseNetwork_in, ResponseMsg) {
	if (isHome(in_msg.Address) == false) {
		//send mem ack to home node to delete this node as a forwarder
		enqueue(responseNetwork_out, ResponseMsg) {
        		out_msg.Address := in_msg.Address;
			out_msg.Sender := machineID;
			out_msg.Type := CoherenceResponseType:WRITEBACK_CLEAN_ACK;
			DPRINTF(RubySlicc, "Deforward to : %s\n", map_Address_to_Directory(address));
        		out_msg.Destination.add(map_Address_to_Directory(address));
        		out_msg.MessageSize := MessageSizeType:Response_Control;
		}
	} else {
		getDirectoryEntry(in_msg.Address).Sharers.clear();
		getDirectoryEntry(in_msg.Address).Owner.clear();
	}
  }
}
  action(sr_sendRequestToHome, "sr", desc="sdaF") {
    peek(requestNetwork_in, RequestMsg) {
    enqueue(requestNetwork_out, RequestMsg) {
        out_msg.Address := address;
        out_msg.Type := in_msg.Type;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.MessageSize := MessageSizeType:Request_Control;
  }
}}

  action(srr_sendResponseToHome, "srr", desc="sdaF") {
    peek(responseNetwork_in, ResponseMsg) {
    enqueue(responseNetwork_out, ResponseMsg) {
        out_msg.Address := address;
        out_msg.Type := in_msg.Type;
        out_msg.Sender := machineID;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.MessageSize := in_msg.MessageSize;
  }
}}

  // Actions
  action(aa_sendAck, "aa", desc="Send ack to L2") {
    peek(memQueue_in, MemoryMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:MEMORY_ACK;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.OriginalRequestorMachId);
        out_msg.MessageSize := MessageSizeType:Response_Control;
      }
    }
  }

  action(j_popIncomingRequestQueue, "j", desc="Pop incoming request queue") {
    requestNetwork_in.dequeue();
  }

  action(k_popIncomingResponseQueue, "k", desc="Pop incoming request queue") {
    responseNetwork_in.dequeue();
  }

  action(l_popMemQueue, "l", desc="Pop off-chip request queue") {
    memQueue_in.dequeue();
  }

  action(kd_wakeUpDependents, "kd", desc="wake-up dependents") {
    wakeUpBuffers(address);
  }

  action(qf_queueMemoryFetchRequest, "qf", desc="Queue off-chip fetch request") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(memQueue_out, MemoryMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_READ;
        out_msg.Sender := machineID;
        out_msg.OriginalRequestorMachId := in_msg.Requestor;
        out_msg.MessageSize := in_msg.MessageSize;
        out_msg.Prefetch := in_msg.Prefetch;
        out_msg.DataBlk := getDirectoryEntry(in_msg.Address).DataBlk;

        DPRINTF(RubySlicc, "%s\n", out_msg);
      }
    }
  }

  action(qw_queueMemoryWBRequest, "qw", desc="Queue off-chip writeback request") {
    peek(responseNetwork_in, ResponseMsg) {
      enqueue(memQueue_out, MemoryMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_WB;
        out_msg.Sender := machineID;
        out_msg.OriginalRequestorMachId := in_msg.Sender;
        out_msg.DataBlk := in_msg.DataBlk;
        out_msg.MessageSize := in_msg.MessageSize;
        //out_msg.Prefetch := in_msg.Prefetch;

        DPRINTF(RubySlicc, "%s\n", out_msg);
      }
    }
  }

  action(m_writeDataToMemory, "m", desc="Write dirty writeback to memory") {
    peek(responseNetwork_in, ResponseMsg) {
      getDirectoryEntry(in_msg.Address).DataBlk := in_msg.DataBlk;
      DPRINTF(RubySlicc, "Address: %s, Data Block: %s\n",
              in_msg.Address, in_msg.DataBlk);
    }
  }
  action(qw_queueMemoryWBRequest_partial, "qwp", desc="Queue off-chip writeback request") {
     peek(requestNetwork_in, RequestMsg) {
      enqueue(memQueue_out, MemoryMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_WB;
        out_msg.OriginalRequestorMachId := machineID;
        //out_msg.DataBlk := in_msg.DataBlk;
        out_msg.DataBlk.copyPartial(in_msg.DataBlk, addressOffset(address), in_msg.Len);


        out_msg.MessageSize := in_msg.MessageSize;
        //out_msg.Prefetch := in_msg.Prefetch;

        DPRINTF(RubySlicc, "%s\n", out_msg);
      }
    }
  }


  action(z_stallAndWaitRequest, "z", desc="recycle request queue") {
    stall_and_wait(requestNetwork_in, address);
  }

  action(zz_recycleDMAQueue, "zz", desc="recycle DMA queue") {
    requestNetwork_in.recycle();
  }


  action(e_ownerIsRequestor, "e", desc="The owner is now the requestor") {
    peek(requestNetwork_in, RequestMsg) {
      getDirectoryEntry(address).Owner.clear();
      getDirectoryEntry(address).Owner.add(in_msg.Requestor);
    }
  }

  action(ef_forwarderIsRequestor, "ef", desc="The owner is now the requestor") {
    peek(requestNetwork_in, RequestMsg) {
      getDirectoryEntry(address).Forwarder := in_msg.Requestor;
    }
  }

  action(efh_forwarderIsHome, "efh", desc="The owner is now the requestor") {
      getDirectoryEntry(address).Forwarder := (map_Address_to_Directory(address));
  }

  action(ew_ownerIsThisNode, "ew", desc="") {
      getDirectoryEntry(address).Owner.clear();
      getDirectoryEntry(address).Owner.add(idToMachineID(MachineType:Directory, id));
  }

  action(ino_sendCacheInvalidateToOwner, "ino", desc="Invalidate a cache block") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=directory_latency) {
      out_msg.Address := address;
      out_msg.Type := CoherenceResponseType:INV;
      out_msg.Sender := machineID;
      out_msg.Destination := getDirectoryEntry(address).Owner;
      out_msg.MessageSize := MessageSizeType:Response_Control;
      }
    }
  }


  action(insf_sendCacheInvalidateToSharersMinusForwarder, "insf", desc="Invalidate a cache block") {
      enqueue(responseNetwork_out, ResponseMsg, latency=directory_latency) {
      out_msg.Address := address;
      out_msg.Type := CoherenceResponseType:INV;
      out_msg.Sender := machineID;
      out_msg.Destination := getDirectoryEntry(address).Sharers;
      out_msg.Destination.remove(getDirectoryEntry(address).Forwarder);
      out_msg.MessageSize := MessageSizeType:Response_Control;
    }
  }

  action(c_clearOwner, "c", desc="Clear the owner field") {
    getDirectoryEntry(address).Owner.clear();
  }

  action(cs_clearSharers, "cs", desc="") {
    getDirectoryEntry(address).Sharers.clear();
	}

  action(vr_allocateTBE, "vr", desc="Allocate TBE") {
    peek(responseNetwork_in, ResponseMsg) {
      TBEs.allocate(address);
      set_tbe(TBEs[address]); 
      tbe.DataBlk := in_msg.DataBlk;
      tbe.PhysicalAddress := in_msg.Address;
    }
}
  action(rh_relayResponseToHome, "rh", desc="...") {
    peek(responseNetwork_in, ResponseMsg) {
	enqueue(responseNetwork_out, ResponseMsg) {
		      out_msg.Address := address;
        out_msg.Sender := machineID;
	out_msg.Type := in_msg.Type;
        out_msg.Destination.add(map_Address_to_Directory(in_msg.Address));
	out_msg.DataBlk := in_msg.DataBlk;
	out_msg.Dirty := in_msg.Dirty;
        out_msg.MessageSize := in_msg.MessageSize;
	}
  }
}


  action(qw_queueMemoryWBRequest_partialTBE, "qwt", desc="Queue off-chip writeback request") {
    peek(responseNetwork_in, ResponseMsg) {
      enqueue(memQueue_out, MemoryMsg, latency=to_mem_ctrl_latency) {
        assert(is_valid(tbe));
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_WB;
        out_msg.OriginalRequestorMachId := in_msg.Sender;
        //out_msg.DataBlk := in_msg.DataBlk;
        //out_msg.DataBlk.copyPartial(tbe.DataBlk, tbe.Offset, tbe.Len);
        out_msg.DataBlk.copyPartial(tbe.DataBlk, addressOffset(tbe.PhysicalAddress), tbe.Len);
 
        out_msg.MessageSize := in_msg.MessageSize;
        //out_msg.Prefetch := in_msg.Prefetch;
   
        DPRINTF(RubySlicc, "%s\n", out_msg);
      }
    }
  }

  action(w_deallocateTBE, "w", desc="Deallocate TBE") {
    TBEs.deallocate(address); 
    unset_tbe();
  }

  action(anh_assertResNotHome, "anh", desc="") {
    peek(responseNetwork_in, ResponseMsg) {
	assert(isHome(in_msg.Address) == false);
    }
  }

  action(qf_queueMemoryFetchRequestDMA, "qfd", desc="Queue off-chip fetch request") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(memQueue_out, MemoryMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := MemoryRequestType:MEMORY_READ;
        out_msg.Sender := machineID;
        out_msg.OriginalRequestorMachId := machineID;
        out_msg.MessageSize := in_msg.MessageSize;
        out_msg.DataBlk := getDirectoryEntry(address).DataBlk;
        DPRINTF(RubySlicc, "%s\n", out_msg);
      }
    }
  }

  action(p_popIncomingDMARequestQueue, "p", desc="Pop incoming DMA queue") {
    requestNetwork_in.dequeue();
  }

  action(dr_sendDMAData, "dr", desc="Send Data to DMA controller from directory") {
    peek(memQueue_in, MemoryMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:DATA;
        out_msg.DataBlk := in_msg.DataBlk;   // we send the entire data block and rely on the dma controller to split it up if need be
        out_msg.Destination.add(map_Address_to_DMA(address));
        out_msg.MessageSize := MessageSizeType:Response_Data;
      }
    }
  }

  action(dwt_writeDMADataFromTBE, "dwt", desc="DMA Write data to memory from TBE") {
    assert(is_valid(tbe));
    //getDirectoryEntry(address).DataBlk.copyPartial(tbe.DataBlk, tbe.Offset, tbe.Len);
    getDirectoryEntry(address).DataBlk.copyPartial(tbe.DataBlk, addressOffset(tbe.PhysicalAddress), tbe.Len);


  }

  action(dw_writeDMAData, "dw", desc="DMA Write data to memory") {
    peek(requestNetwork_in, RequestMsg) {
      getDirectoryEntry(address).DataBlk.copyPartial(in_msg.DataBlk, addressOffset(in_msg.Address), in_msg.Len);
    }
  }

  action(da_sendDMAAck, "daf", desc="Send Ack to DMA controller") {
      enqueue(responseNetwork_out, ResponseMsg, latency=to_mem_ctrl_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:ACK;
        out_msg.Destination.add(map_Address_to_DMA(address));
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
      }
  }

  action(inv_sendCacheInvalidate, "inv", desc="Invalidate a cache block") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=directory_latency) {
      out_msg.Address := address;
      out_msg.Type := CoherenceResponseType:INV;
      out_msg.Sender := machineID;
      out_msg.Destination := getDirectoryEntry(address).Owner;
      out_msg.MessageSize := MessageSizeType:Response_Control;
      }
    }
  }

  action(dwn_sendCacheDowngrade, "dwn", desc="Invalidate a cache block") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency=directory_latency) {
assert(false);
      out_msg.Address := address;
      out_msg.Type := CoherenceResponseType:INV;
      out_msg.Sender := machineID;
      out_msg.Destination := getDirectoryEntry(address).Owner;
      out_msg.MessageSize := MessageSizeType:Response_Control;
      }
    }
  }

  action(ial_sendInvToSharersMinusOwner, "ial", desc="") {
} 

action(q_updateAckCount, "q", desc="") {
}

action(er_sendEndRequest, "er", desc="") {
}

  // TRANSITIONS


  transition(I, {GETX_H}, IM_M) { // value is only in memory
    qf_queueMemoryFetchRequest;
    e_ownerIsRequestor;
    j_popIncomingRequestQueue;
  }

  transition(I, {GETX_RL_NO_SHARERS}, IMS_M) { // value is only in memory
    qf_queueMemoryFetchRequest;
    e_ownerIsRequestor;
    j_popIncomingRequestQueue;
  }

  transition(FH, GETX_RL_NO_SHARERS_F, MH) {
     efh_forwarderIsHome;
     e_ownerIsRequestor;
     aq_sendAckFromReq;
     j_popIncomingRequestQueue;
  }

  transition(I, {GETS_RL}, IF_M) { // value is only in memory, we're home, and we're in I
    qf_queueMemoryFetchRequest;
    ef_forwarderIsRequestor;
    e_ownerIsRequestor; //this is a hack, when in forward or in S state, owner tells which L3 has the value
    j_popIncomingRequestQueue;
  }

  transition(IMS_M, Memory_Data, MH) {
    do_sendDataToOwner;
    dos_saveDataFromMemory;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(IM_M, Memory_Data, MH) {
    d_sendData;
    dos_saveDataFromMemory;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(I, GETS_H, IE_M) {
    qf_queueMemoryFetchRequest;
    e_ownerIsRequestor;
    j_popIncomingRequestQueue;
  }

  transition(EH, GETX_H, MH) {
    aq_sendAckFromReq;
    j_popIncomingRequestQueue;
  }

  transition(IE_M, Memory_Data, EH) {
    d_sendData;
    dos_saveDataFromMemory;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(IF_M, Memory_Data, FH) {
    d_sendData;
    dos_saveDataFromMemory;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(IF_S, Data_Home, F) {
	d_sendDataToTBERequestor;
    k_popIncomingResponseQueue;
  }

  transition(IF_S, Data_CA, FR) {
	vr_allocateTBE;
	k_popIncomingResponseQueue;
  }

  transition(FR, End_Request, F) {
	d_sendDataToTBERequestor;
	k_popIncomingResponseQueue;
  }

//added by SS
//  transition({M, E}, CleanReplacement, I) {
//    c_clearOwner;
//    a_sendAck;
///    k_popIncomingResponseQueue;
//  }

  transition({M, MH}, {WB_Data_Local, WB_Data_CA}, XI_M) {
//    m_writeDataToMemory;
    qw_queueMemoryWBRequest;
    k_popIncomingResponseQueue;
  }

  transition(M, {WB_Data_Local_O}, XI_H) {
    srr_sendResponseToHome;
    k_popIncomingResponseQueue;
  }

  transition(XI_H, Ack_Home, I) {
}

  transition(XI_M, Memory_Ack_Local, I) {
    c_clearOwner;
    aa_sendAck;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(I, GETX_O, IM_S) {
    sr_sendRequestToHome;
    vr_allocateTBE;
    srt_setTBERequestor;
    j_popIncomingRequestQueue;
  }

  transition(F, GETX_O, FM_H) {
	sr_sendRequestToHome;
    srt_setTBERequestor;
	j_popIncomingRequestQueue;
  }

  transition(FM_H, Memory_Ack_CA, M) {
	d_sendDataToTBERequestor;
	w_deallocateTBE;
	k_popIncomingResponseQueue;
  }

  transition(I, GETS_O, IF_S) {
    sr_sendRequestToHome;
    vr_allocateTBE;
    srt_setTBERequestor;
    j_popIncomingRequestQueue;
  }

  transition(IM_S, Data_Home, M) {
	d_sendDataToTBERequestor;
    k_popIncomingResponseQueue;
  }

  transition(IM_S, Data_CA, MR) {
vr_allocateTBE;
k_popIncomingResponseQueue;
  }

  transition(MR, End_Request, M) {
dt_sendDataToTBERequestorFromTBE;
k_popIncomingResponseQueue;
}

  transition({M, MH}, GETX_H) {
    aq_sendAckFromReq;
    j_popIncomingRequestQueue;
  }

  transition(MH, WB_Ack_Local, I) {
	c_clearOwner;
	a_sendAck;
	k_popIncomingResponseQueue;
  }

  transition(EH, WB_Ack_Local, I) {
	c_clearOwner;
	a_sendAck;
	k_popIncomingResponseQueue;
  }

  transition(FH, WB_Ack_Local, IF_M) {
//	conditionalDeforwardify;
	a_sendAck;
//	w_deallocateTBE;
	k_popIncomingResponseQueue;
  }

  transition(F, WB_Ack_CA, I) {
	c_clearOwner;
	efh_forwarderIsHome;
	k_popIncomingResponseQueue;
  }

//  transition(F, WB_Ack_CA_is_Sharer, F) { //TODO remove sharer
//	a_sendAck;
//	efh_forwarderIsHome;
//	k_popIncomingResponseQueue;
//  }

  transition(EH, WB_Data_Local, XI_M) {
//    m_writeDataToMemory;
    qw_queueMemoryWBRequest;
    k_popIncomingResponseQueue;
  }


  transition(M, GETX_O, M) {
	a_sendAck;
	j_popIncomingRequestQueue;
  }

  transition(I, DMA_WRITE, ID_W) {
    dw_writeDMAData;
    qw_queueMemoryWBRequest_partial;
    j_popIncomingRequestQueue;
  }

  transition(ID_W, Memory_Ack_Local, I) {
    da_sendDMAAck;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(I, DMA_READ, ID) {
    qf_queueMemoryFetchRequestDMA;
    j_popIncomingRequestQueue;
  }

  transition(ID, Memory_Data, I) {
    dr_sendDMAData;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(EH, DMA_WRITE, E_DWR) {
    vr_allocateTBE;
    inv_sendCacheInvalidate;
    j_popIncomingRequestQueue;
  }

  transition(E_DWR, WB_Ack_Local, E_DWRI) {
//    m_writeDataToMemory;
    qw_queueMemoryWBRequest_partialTBE;
    k_popIncomingResponseQueue; 
  }

  transition(E_DWRI, Memory_Ack_Local, I) {
    dwt_writeDMADataFromTBE;
    aa_sendAck;
    c_clearOwner;
    da_sendDMAAck;
    w_deallocateTBE;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(MH, DMA_WRITE, M_DWR) {
    vr_allocateTBE;
    inv_sendCacheInvalidate;
    j_popIncomingRequestQueue;
  }

  transition(M_DWR, WB_Data_Local, M_DWRI) {
//    m_writeDataToMemory;
    qw_queueMemoryWBRequest_partialTBE;
    k_popIncomingResponseQueue; 
  }

  transition(M_DWRI, Memory_Ack_Local, I) {
    dwt_writeDMADataFromTBE;
    aa_sendAck;
    c_clearOwner;
    da_sendDMAAck;
    w_deallocateTBE;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(MH, DMA_READ, M_DRD) {
    inv_sendCacheInvalidate;
    j_popIncomingRequestQueue;
  }

  transition(M_DRD, WB_Data_Local, M_DRDI) {
    drp_sendDMAData;
//    m_writeDataToMemory;
    qw_queueMemoryWBRequest;
    k_popIncomingResponseQueue;
  }

  transition(M_DRDI, Memory_Ack_Local, I) {
    aa_sendAck;
    c_clearOwner;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(EH, DMA_READ, E_DRD) {
    inv_sendCacheInvalidate;
    j_popIncomingRequestQueue;
  }

  transition(E_DRD, WB_Ack_Local, E_DRDI) {
    drp_sendDMAData;
//    m_writeDataToMemory;
    qw_queueMemoryWBRequest;
    k_popIncomingResponseQueue;
  }

  transition(E_DRDI, Memory_Ack_Local, I) {
    aa_sendAck;
    c_clearOwner;
    l_popMemQueue;
    kd_wakeUpDependents;
  }

  transition(MH, GETS_RL, MHS_L3) {
	inv_sendCacheInvalidate;
vr_allocateTBE;
	srt_setTBERequestor;
    c_clearOwner;
cs_clearSharers;
j_popIncomingRequestQueue;
  }

transition(MHS_L3, WB_Data_Local, S) {
d_sendDataToTBERequestor;
srr_sendResponseToHome;
}

  transition(MI_L3, WB_Data_Local, I) {
d_sendDataToTBERequestor;
k_popIncomingResponseQueue;
}

transition(M, GETS_S, MS_L3) {
dwn_sendCacheDowngrade;
j_popIncomingRequestQueue;
}

transition(MS_L3, WB_Data_Local, S) {
d_sendDataToTBERequestor;
k_popIncomingResponseQueue;
}

transition(FH, GETX_RO, FHI_R) {
s_sendSnoopToCA;
e_ownerIsRequestor;
j_popIncomingRequestQueue;
}

transition(FHI_R, Response, I) {
c_clearOwner;
cs_clearSharers;
k_popIncomingResponseQueue;
}

transition(FHI_R, Conflict, FHI_RC) {
k_popIncomingResponseQueue;
kd_wakeUpDependents;
}

transition(FHI_RC, GETS_RO, FHI_RC_M) {
vr_allocateTBE
srt_setTBERequestor;
qf_queueMemoryFetchRequest;
}

transition(FHI_RC_M, Memory_Data, FHI_R) {
d_sendDataToTBERequestor;
l_popMemQueue;
}

transition(FHI_R, Last_Response, I) {
er_sendEndRequest;
k_popIncomingResponseQueue;
}

transition({S, F}, GETX_S, SI_L3) {
vr_allocateTBE;
srt_setTBERequestor;
inv_sendCacheInvalidate;
}

transition(SI_L3, WB_Ack_Local, I) {
srr_sendResponseToHome;
k_popIncomingResponseQueue;
}

}
