
/*
 * Copyright (c) 1999-2005 Mark D. Hill and David A. Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

machine(L1Cache, "MESIF Directory L1 Cache Multicore")
 : Sequencer * sequencer, //handles all incomming requests
   CacheMemory * L1IcacheMemory,
   CacheMemory * L1DcacheMemory,
   int L2ID,
   int l2_select_num_bits,
   int l1_request_latency = 1,
   int l1_response_latency = 1,
   int to_l2_latency = 1,
   bool send_evictions
{
  MessageBuffer requestFromL1Cache, network="To", virtual_network="0", ordered="false", vnet_type="request";
  MessageBuffer responseFromL1Cache, network="To", virtual_network="1", ordered="false", vnet_type="response";
//  MessageBuffer unblockFromL2Cache, network="From", virtual_network="2", ordered="false", vnet_type="unblock";
  MessageBuffer unblockToL2Cache, network="To", virtual_network="2", ordered="false", vnet_type="unblock";

  MessageBuffer requestToL1Cache, network="From", virtual_network="0", ordered="false", vnet_type="request";
  MessageBuffer responseToL1Cache, network="From", virtual_network="1", ordered="false", vnet_type="response";

  // STATES
  state_declaration(State, desc="Cache states", default="L1Cache_State_I") {
    // Base states
    I, AccessPermission:Invalid, desc="a L1 cache entry Idle";
    S, AccessPermission:Read_Only, desc="a L1 cache entry Shared";
    E, AccessPermission:Read_Only, desc="a L1 cache entry Exclusive";
    M, AccessPermission:Read_Write, desc="a L1 cache entry Modified", format="!b";

    // Transient States
    IS, AccessPermission:Busy, desc="L1 idle, issued GETS, have not seen response yet";
    IM, AccessPermission:Busy, desc="L1 idle, issued GETX, have not seen response yet";
    IM_I, AccessPermission:Busy, desc="L1 idle, issued GETX, have not seen response yet";
    SM, AccessPermission:Read_Only, desc="L1 idle, issued GETX, have not seen response yet";
    IS_I, AccessPermission:Busy, desc="L1 idle, issued GETS, saw Inv before data because directory doesn't block on GETS hit";

    M_I, AccessPermission:Busy, desc="L1 replacing, waiting for ACK";
  }

  // EVENTS
  enumeration(Event, desc="Cache events") {
    // L1 events
    Load,            desc="Load request from the home core";
    Ifetch,          desc="I-fetch request from the home core";
    Store,           desc="Store request from the home core";

    Inv,           desc="Invalidate request from L2";

    // internal generated request ??
    L1_Replacement,  desc="L1 Replacement", format="!r";

    Data,       desc="Data for processor";
    Data_Exclusive,       desc="Data for processor";
//    DataS_fromL1,       desc="data for GETS request, need to unblock directory";
//    Data_all_Acks,       desc="Data for processor, all acks";

    Ack,        desc="Ack for processor";
//    Ack_all,      desc="Last ack for processor";

    WB_Ack,        desc="Ack for replacement";
  }

  // TYPES

  // CacheEntry
  structure(Entry, desc="...", interface="AbstractCacheEntry" ) {
    State CacheState,        desc="cache state";
    DataBlock DataBlk,       desc="data for the block";
    bool Dirty, default="false",   desc="data is dirty";
  }

  // TBE fields - TBE = Miss Status Handling Register
  structure(TBE, desc="...") {
    Address Address,              desc="Physical address for this TBE";
    State TBEState,        desc="Transient state";
    DataBlock DataBlk,                desc="Buffer for the data block";
    bool Dirty, default="false",   desc="data is dirty";
//    bool isPrefetch,       desc="Set if this was caused by a prefetch";
    int pendingAcks, default="0", desc="number of pending acks";
  }

  structure(TBETable, external="yes") {
    TBE lookup(Address);
    void allocate(Address);
    void deallocate(Address);
    bool isPresent(Address);
  }

  TBETable L1_TBEs, template_hack="<L1Cache_TBE>";

  MessageBuffer mandatoryQueue, ordered="false";

  int l2_select_low_bit, default="RubySystem::getBlockSizeBits()";

  void set_cache_entry(AbstractCacheEntry a);
  void unset_cache_entry();
  void set_tbe(TBE a);
  void unset_tbe();
  void wakeUpBuffers(Address a);

  // helper functions
  // inclusive cache returns L1 entries only
  Entry getCacheEntry(Address addr), return_by_pointer="yes" {
    Entry L1Dcache_entry := static_cast(Entry, "pointer", L1DcacheMemory[addr]);
    if(is_valid(L1Dcache_entry)) {
      return L1Dcache_entry;
    }

    Entry L1Icache_entry := static_cast(Entry, "pointer", L1IcacheMemory[addr]);
    return L1Icache_entry;
  }

  Entry getL1DCacheEntry(Address addr), return_by_pointer="yes" {
    Entry L1Dcache_entry := static_cast(Entry, "pointer", L1DcacheMemory[addr]);
    return L1Dcache_entry;
  }

  Entry getL1ICacheEntry(Address addr), return_by_pointer="yes" {
    Entry L1Icache_entry := static_cast(Entry, "pointer", L1IcacheMemory[addr]);
    return L1Icache_entry;
  }

  State getState(TBE tbe, Entry cache_entry, Address addr) {
    assert((L1DcacheMemory.isTagPresent(addr) && L1IcacheMemory.isTagPresent(addr)) == false);

    if(is_valid(tbe)) {
      return tbe.TBEState;
    } else if (is_valid(cache_entry)) {
      return cache_entry.CacheState;
    }
    return State:I; //used to be State:NP !!!
  }

  void setState(TBE tbe, Entry cache_entry, Address addr, State state) {
    assert((L1DcacheMemory.isTagPresent(addr) && L1IcacheMemory.isTagPresent(addr)) == false);

    // MUST CHANGE
    if(is_valid(tbe)) {
      tbe.TBEState := state;
    }

    if (is_valid(cache_entry)) {
      cache_entry.CacheState := state;
    }
  }

  AccessPermission getAccessPermission(Address addr) { // Tell whether readable, dirty
    TBE tbe := L1_TBEs[addr];
    if(is_valid(tbe)) {
      DPRINTF(RubySlicc, "%s\n", L1Cache_State_to_permission(tbe.TBEState));
      return L1Cache_State_to_permission(tbe.TBEState);
    }

    Entry cache_entry := getCacheEntry(addr);
    if(is_valid(cache_entry)) {
      DPRINTF(RubySlicc, "%s\n", L1Cache_State_to_permission(cache_entry.CacheState));
      return L1Cache_State_to_permission(cache_entry.CacheState);
    }

    DPRINTF(RubySlicc, "%s\n", AccessPermission:NotPresent);
    //Is not in this cache
    return AccessPermission:NotPresent;
  }

  DataBlock getDataBlock(Address addr), return_by_ref="yes" {
    //Either in TBE
    TBE tbe := L1_TBEs[addr];
    if(is_valid(tbe)) {
        return tbe.DataBlk;
    }
    //Or just in cache
    return getCacheEntry(addr).DataBlk;
  }

  void setAccessPermission(Entry cache_entry, Address addr, State state) {
    if (is_valid(cache_entry)) {
      cache_entry.changePermission(L1Cache_State_to_permission(state));
    } 
  }

  //Mapping Ruby request to SLICC
  Event mandatory_request_type_to_event(RubyRequestType type) {
    if (type == RubyRequestType:LD) {
      return Event:Load;
    } else if (type == RubyRequestType:IFETCH) {
      return Event:Ifetch;
    } else if ((type == RubyRequestType:ST) || (type == RubyRequestType:ATOMIC)) { //What do theh mean ATOMIC?
      return Event:Store;
    } else {
      DPRINTF(RubySlicc, "%s\n", type);
      error("Invalid RubyRequestType");
    }
  }

  int getPendingAcks(TBE tbe) {
    assert(is_valid(tbe));
    return tbe.pendingAcks;
  }

  out_port(requestIntraChipL1Network_out, RequestMsg, requestFromL1Cache);
  out_port(responseIntraChipL1Network_out, ResponseMsg, responseFromL1Cache);
  out_port(unblockNetwork_out, ResponseMsg, unblockToL2Cache);

  // Response IntraChip L1 Network - response msg to this L1 cache - 1st is a port name
  // Basically just triggers actions for arriving responses
  in_port(responseIntraChipL1Network_in, ResponseMsg, responseToL1Cache, rank = 2) {
    if (responseIntraChipL1Network_in.isReady()) { //Seems like the network can block, but why, how?
      peek(responseIntraChipL1Network_in, ResponseMsg, block_on="Address") {
        assert(in_msg.Destination.isElement(machineID));

        Entry cache_entry := getCacheEntry(in_msg.Address);
        TBE tbe := L1_TBEs[in_msg.Address];

	DPRINTF(RubySlicc, "Response to L1 in state %s : %s\n", getState(tbe, cache_entry, in_msg.Address), in_msg);

	//simplyfied L1 only receives data and WB_ACK
        if(in_msg.Type == CoherenceResponseType:DATA) {
	  trigger(Event:Data, in_msg.Address, cache_entry, tbe);
	} else if (in_msg.Type == CoherenceResponseType:DATA_EXCLUSIVE) {
	  trigger(Event:Data_Exclusive, in_msg.Address, cache_entry, tbe);
        } else if (in_msg.Type == CoherenceResponseType:WB_ACK) {
          trigger(Event:WB_Ack, in_msg.Address, cache_entry, tbe);
	} else if (in_msg.Type == CoherenceResponseType:ACK) {
          trigger(Event:Ack, in_msg.Address, cache_entry, tbe);
	} else {
	  DPRINTF(RubySlicc, "%s\n", in_msg);
	  error("invalid response");
	}
      }
    }
  }

  // Request IntraChip network - request from this L1 cache to the shared L2 ?? It used to say InterChip here
  // Basically just triggers actions for arriving requests
  in_port(requestIntraChipL1Network_in, RequestMsg, requestToL1Cache, rank = 1) {
    if(requestIntraChipL1Network_in.isReady()) {
      peek(requestIntraChipL1Network_in, RequestMsg, block_on="Address") {
        assert(in_msg.Destination.isElement(machineID));

	DPRINTF(RubySlicc, "Request to L1: %s\n", in_msg);

        Entry cache_entry := getCacheEntry(in_msg.Address);
        TBE tbe := L1_TBEs[in_msg.Address];

        if (in_msg.Type == CoherenceRequestType:INV) {
          trigger(Event:Inv, in_msg.Address, cache_entry, tbe);}
//        } else {
//else if (in_msg.Type == CoherenceRequestType:GETX || in_msg.Type == CoherenceRequestType:UPGRADE) {
//          // upgrade transforms to GETX due to race
//          trigger(Event:Fwd_GETX, in_msg.Address, cache_entry, tbe);
//        } else if (in_msg.Type == CoherenceRequestType:GETS) {
//          trigger(Event:Fwd_GETS, in_msg.Address, cache_entry, tbe);
//        } else if (in_msg.Type == CoherenceRequestType:GET_INSTR) {
//          trigger(Event:Fwd_GET_INSTR, in_msg.Address, cache_entry, tbe);
//        } else {
//
//          error("Invalid forwarded request type");
//        }
//      }
    }}
  }

  // Mandatory Queue betweens Node's CPU and it's L1 caches ?? why more than one L1? Data and Instruction?
  // This basically filters messages from the CPU a triggers according actions
  in_port(mandatoryQueue_in, RubyRequest, mandatoryQueue, desc="...", rank = 0) {
    if (mandatoryQueue_in.isReady()) {
      peek(mandatoryQueue_in, RubyRequest, block_on="LineAddress") {
	DPRINTF(RubySlicc, "Request coming through mandatory queue: %s\n", in_msg);

        // Check for data access to blocks in I-cache and ifetchs to blocks in D-cache

        if (in_msg.Type == RubyRequestType:IFETCH) {
          // ** INSTRUCTION ACCESS ***

          Entry L1Icache_entry := getL1ICacheEntry(in_msg.LineAddress);
          if (is_valid(L1Icache_entry)) {
            // The tag matches for the L1, so the L1 asks the L2 for it. ?? What about L2? Tag matches, so return the value, rigth?
            trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.LineAddress,
                    L1Icache_entry, L1_TBEs[in_msg.LineAddress]);
          } else {

            // Check to see if it is in the OTHER L1 ?? What? Instruction in data cache? I'll delete this I guess
            Entry L1Dcache_entry := getL1DCacheEntry(in_msg.LineAddress);
            if (is_valid(L1Dcache_entry)) {
              // The block is in the wrong L1, put the request on the queue to the shared L2
              trigger(Event:L1_Replacement, in_msg.LineAddress,
                      L1Dcache_entry, L1_TBEs[in_msg.LineAddress]);
            }

            if (L1IcacheMemory.cacheAvail(in_msg.LineAddress)) {
              // L1 does't have the line, but we have space for it in the L1 so let's see if the L2 has it
              trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.LineAddress,
                      L1Icache_entry, L1_TBEs[in_msg.LineAddress]);
            } else {
              // No room in the L1, so we need to make room in the L1 ?? I guess this is really all I need for my purposes. L1I Miss? Yes, then fetch it from memory
              trigger(Event:L1_Replacement, L1IcacheMemory.cacheProbe(in_msg.LineAddress),
                      getL1ICacheEntry(L1IcacheMemory.cacheProbe(in_msg.LineAddress)),
                      L1_TBEs[L1IcacheMemory.cacheProbe(in_msg.LineAddress)]);
            }
          }
        } else { // TODO double check with MESI!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

          // *** DATA ACCESS *** ?? Same comments as above, why get it from L2? An assertion that data are in L2 should be enough
          Entry L1Dcache_entry := getL1DCacheEntry(in_msg.LineAddress);
          if (is_valid(L1Dcache_entry)) {
            // The tag matches for the L1, so the L1 ask the L2 for it
            trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.LineAddress,
                    L1Dcache_entry, L1_TBEs[in_msg.LineAddress]);
          } else {

            // Check to see if it is in the OTHER L1
            Entry L1Icache_entry := getL1ICacheEntry(in_msg.LineAddress);
            if (is_valid(L1Icache_entry)) {
              // The block is in the wrong L1, put the request on the queue to the shared L2
              trigger(Event:L1_Replacement, in_msg.LineAddress,
                      L1Icache_entry, L1_TBEs[in_msg.LineAddress]);
            }

            if (L1DcacheMemory.cacheAvail(in_msg.LineAddress)) {
              // L1 does't have the line, but we have space for it in the L1 let's see if the L2 has it
              trigger(mandatory_request_type_to_event(in_msg.Type), in_msg.LineAddress,
                      L1Dcache_entry, L1_TBEs[in_msg.LineAddress]);
            } else {
              // No room in the L1, so we need to make room in the L1
              trigger(Event:L1_Replacement, L1DcacheMemory.cacheProbe(in_msg.LineAddress),
                      getL1DCacheEntry(L1DcacheMemory.cacheProbe(in_msg.LineAddress)),
                      L1_TBEs[L1DcacheMemory.cacheProbe(in_msg.LineAddress)]);
            }
          }
        }
      }
    }
  }

  // ACTIONS
  action(a_issueGETS, "a", desc="Issue GETS") {
    peek(mandatoryQueue_in, RubyRequest) {
      enqueue(requestIntraChipL1Network_out, RequestMsg, latency=l1_request_latency) { // Insert into queue, IntraChip
        out_msg.Address := address;
        out_msg.Type := CoherenceRequestType:GETS;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(idToMachineID(MachineType:L2Cache, L2ID));
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.AccessMode := in_msg.AccessMode;
      }
    }
  }

  action(ai_issueGETINSTR, "ai", desc="Issue GETINSTR") { // ?? Why would you even send this message?
    peek(mandatoryQueue_in, RubyRequest) {
      enqueue(requestIntraChipL1Network_out, RequestMsg, latency=l1_request_latency) {
        out_msg.Address := address;
      out_msg.Type := CoherenceRequestType:GET_INSTR;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(idToMachineID(MachineType:L2Cache, L2ID));//L2ID;
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.AccessMode := in_msg.AccessMode;
      }
    }
  }


  action(b_issueGETX, "b", desc="Issue GETX") { // ?? This has to be sent only to L2, which will relay it to L3. This cache does not send any messages to other nodes, L3 does.
    peek(mandatoryQueue_in, RubyRequest) {
      enqueue(requestIntraChipL1Network_out, RequestMsg, latency=l1_request_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceRequestType:GETX;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(idToMachineID(MachineType:L2Cache, L2ID));
        DPRINTF(RubySlicc, "Sending GETX TO %s (%s) \n", L2ID, out_msg.Destination);
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.AccessMode := in_msg.AccessMode;
      }
    }
  }

  action(c_issueUPGRADE, "c", desc="Issue GETX") { // ?? What's an upgrade? Upgrade is a change from S to M.
    peek(mandatoryQueue_in, RubyRequest) {
      enqueue(requestIntraChipL1Network_out, RequestMsg, latency= l1_request_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceRequestType:UPGRADE;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(idToMachineID(MachineType:L2Cache, L2ID));
        DPRINTF(RubySlicc, "address: %s, destination: %s\n",
                address, out_msg.Destination);
        out_msg.MessageSize := MessageSizeType:Control;
        out_msg.AccessMode := in_msg.AccessMode;
      }
    }
  }

//  action(d_sendDataToRequestor, "d", desc="send data to requestor") { // ?? This should also be in L2 cache
//    peek(requestIntraChipL1Network_in, RequestMsg) {
//      enqueue(responseIntraChipL1Network_out, ResponseMsg, latency=l1_response_latency) {
//        assert(is_valid(cache_entry));
//        out_msg.Address := address;
//        out_msg.Type := CoherenceResponseType:DATA;
//        out_msg.DataBlk := cache_entry.DataBlk;
//        out_msg.Dirty := cache_entry.Dirty;
//        out_msg.Sender := machineID;
//        out_msg.Destination.add(in_msg.Requestor);
//        out_msg.MessageSize := MessageSizeType:Response_Data;
//      }
//    }
//  }

//  action(dt_sendDataToRequestor_fromTBE, "dt", desc="send data to requestor") { // ?? Again, move it to L2
//    peek(requestIntraChipL1Network_in, RequestMsg) {
//      enqueue(responseIntraChipL1Network_out, ResponseMsg, latency=l1_response_latency) {
//        assert(is_valid(tbe));
//        out_msg.Address := address;
//        out_msg.Type := CoherenceResponseType:DATA;
//        out_msg.DataBlk := tbe.DataBlk;
//      out_msg.Dirty := tbe.Dirty;
//        out_msg.Sender := machineID;
//        out_msg.Destination.add(in_msg.Requestor);
//        out_msg.MessageSize := MessageSizeType:Response_Data;
//      }
//    }
//  }

//  action(e_sendAckToRequestor, "e", desc="send invalidate ack to requestor (could be L2 or L1)") { // ?? Needed? Only L2 I guess TODO was removed, not good!!!
//    peek(requestIntraChipL1Network_in, RequestMsg) {
//      enqueue(responseIntraChipL1Network_out, ResponseMsg, latency=l1_response_latency) {
//        out_msg.Address := address;
//        out_msg.Type := CoherenceResponseType:ACK;
//        out_msg.Sender := machineID;
//        out_msg.Destination.add(in_msg.Requestor);
//        out_msg.MessageSize := MessageSizeType:Response_Control;
//      }
//    }
//  }

  action(f_sendWBDataToL2, "f", desc="send data to the L2 cache") {
    enqueue(responseIntraChipL1Network_out, ResponseMsg, latency=l1_response_latency) {
      assert(is_valid(cache_entry));
      out_msg.Address := address;
      out_msg.Type := CoherenceResponseType:DATA;
      out_msg.DataBlk := cache_entry.DataBlk;
      out_msg.Dirty := cache_entry.Dirty;
      out_msg.Sender := machineID;
      out_msg.Destination.add(idToMachineID(MachineType:L2Cache, L2ID));
      out_msg.MessageSize := MessageSizeType:Writeback_Data;
    }
  }

  action(fi_sendInvAck, "fi", desc="send data to the L2 cache") {
    peek(requestIntraChipL1Network_in, RequestMsg) {
      enqueue(responseIntraChipL1Network_out, ResponseMsg, latency=l1_response_latency) {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:ACK;
        out_msg.Sender := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Response_Control;
        out_msg.AckCount := 1;
      }
    }
  }

  action(forward_eviction_to_cpu, "\cc", desc="sends eviction information to the processor") {
    if (send_evictions) {
      DPRINTF(RubySlicc, "Sending invalidation for %s to the CPU\n", address);
      sequencer.evictionCallback(address);
    }
  }

  action(g_issuePUTX, "g", desc="send data to the L2 cache") {
    enqueue(requestIntraChipL1Network_out, RequestMsg, latency=l1_response_latency) {
      assert(is_valid(cache_entry));
      out_msg.Address := address;
      out_msg.Type := CoherenceRequestType:PUTX;
      out_msg.DataBlk := cache_entry.DataBlk;
      out_msg.Dirty := cache_entry.Dirty;
      out_msg.Requestor:= machineID;
      out_msg.Destination.add(idToMachineID(MachineType:L2Cache, L2ID));
      if (cache_entry.Dirty) {
        out_msg.MessageSize := MessageSizeType:Writeback_Data;
      } else {
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
      }
    }
  }

  action(h_load_hit, "h", desc="If not prefetch, notify sequencer the load completed.") {
    assert(is_valid(cache_entry));
    DPRINTF(RubySlicc, "Load Hit: %s\n", cache_entry.DataBlk);
    sequencer.readCallback(address, cache_entry.DataBlk);
  }

  action(hh_store_hit, "\h", desc="If not prefetch, notify sequencer that store completed.") {
    assert(is_valid(cache_entry));
    DPRINTF(RubySlicc, "Before store hit: %s\n", cache_entry.DataBlk);
    sequencer.writeCallback(address, cache_entry.DataBlk);
    DPRINTF(RubySlicc, "After store hit: %s\n", cache_entry.DataBlk);
    cache_entry.Dirty := true;
  }

  action(i_allocateTBE, "i", desc="Allocate TBE (isPrefetch=0, number of invalidates=0)") {
    check_allocate(L1_TBEs);
    assert(is_valid(cache_entry));
    L1_TBEs.allocate(address);
    set_tbe(L1_TBEs[address]);
//    tbe.isPrefetch := false;
    tbe.Dirty := cache_entry.Dirty;
    tbe.DataBlk := cache_entry.DataBlk;
  }

  action(k_popMandatoryQueue, "k", desc="Pop mandatory queue.") {
    mandatoryQueue_in.dequeue();
  }

  action(l_popRequestQueue, "l", desc="Pop incoming request queue and profile the delay within this virtual network") {
    profileMsgDelay(2, requestIntraChipL1Network_in.dequeue_getDelayCycles());
  }

  action(o_popIncomingResponseQueue, "o", desc="Pop Incoming Response queue and profile the delay within this virtual network") {
    profileMsgDelay(1, responseIntraChipL1Network_in.dequeue_getDelayCycles());
  }

  action(s_deallocateTBE, "s", desc="Deallocate TBE") {
    L1_TBEs.deallocate(address);
    unset_tbe();
  }

  action(u_writeDataToL1Cache, "u", desc="Write data to cache") {
    peek(responseIntraChipL1Network_in, ResponseMsg) {
      assert(is_valid(cache_entry));
      cache_entry.DataBlk := in_msg.DataBlk;
      cache_entry.Dirty := in_msg.Dirty;
    }
  }

  action(ff_deallocateL1CacheBlock, "\f", desc="Deallocate L1 cache block.  Sets the cache to not present, allowing a replacement in parallel with a fetch.") {
    if (L1DcacheMemory.isTagPresent(address)) {
      L1DcacheMemory.deallocate(address);
    } else {
      L1IcacheMemory.deallocate(address);
    }
    unset_cache_entry();
  }

  action(oo_allocateL1DCacheBlock, "\o", desc="Set L1 D-cache tag equal to tag of block B.") {
    if (is_invalid(cache_entry)) {
      set_cache_entry(L1DcacheMemory.allocate(address, new Entry));
    }
  }

  action(pp_allocateL1ICacheBlock, "\p", desc="Set L1 I-cache tag equal to tag of block B.") {
    if (is_invalid(cache_entry)) {
      set_cache_entry(L1IcacheMemory.allocate(address, new Entry));
    }
  }

  action(z_stallAndWaitMandatoryQueue, "\z", desc="recycle L1 request queue") {
    stall_and_wait(mandatoryQueue_in, address);
  }

  action(z_stallAndWaitRequestQueue, "\za", desc="recycle L1 request queue") {
    stall_and_wait(requestIntraChipL1Network_in, address);
  }

  action(kd_wakeUpDependents, "kd", desc="wake-up dependents") {
    wakeUpBuffers(address);
  }

  action(uu_profileInstMiss, "\ui", desc="Profile the demand miss") {
    peek(mandatoryQueue_in, RubyRequest) {
        L1IcacheMemory.profileMiss(in_msg);
    }
  }

  action(uu_profileDataMiss, "\ud", desc="Profile the demand miss") {
    peek(mandatoryQueue_in, RubyRequest) {
        L1DcacheMemory.profileMiss(in_msg);
    }
  }

  //*****************************************************
  // TRANSITIONS
  //*****************************************************

  // Transitions for Load/Store/Replacement/WriteBack from transient states
  transition({IS, IM, IS_I, M_I, SM, IM_I}, {Load, Ifetch, Store, L1_Replacement}) {
    // We cannot proceed
    z_stallAndWaitMandatoryQueue;
  }

  // Transitions from Idle
  transition(I, L1_Replacement) { //just frees memory? Here is a weird thing, do we actually free this very block, or just any block?
    // Nothing would be sufficient, right?
    ff_deallocateL1CacheBlock;
  }

  transition(I, Load, IS) { // We didn't have the block, issue GETS request to L2
    oo_allocateL1DCacheBlock;
    i_allocateTBE; // MSHR - why?
    a_issueGETS; //
    uu_profileDataMiss;
    k_popMandatoryQueue; // Request processed, pop the queue
  }

  transition(I, Ifetch, IS) { // Same as above, but allocated instruction block
    pp_allocateL1ICacheBlock;
    i_allocateTBE;
    ai_issueGETINSTR;
    uu_profileInstMiss; // This is what actually counts number of cache misses? Yead, dummy, it is.
    k_popMandatoryQueue;
  }

  transition(I, Store, IM) { // Same as above, but issue GETX
    oo_allocateL1DCacheBlock;
    i_allocateTBE;
    b_issueGETX;
    uu_profileDataMiss;
    k_popMandatoryQueue;
  }

  transition(I, Inv) { //This is needed because of silent transitions, like S -> I
    fi_sendInvAck;
    l_popRequestQueue;
  }

  // Transitions from Shared
  transition(S, {Load,Ifetch}) { // Satisfiable right away
    h_load_hit; // Tells the sequencer, that load was successfull
    k_popMandatoryQueue;
  }

  transition(S, Store, SM) { // S->M upgrade, TBE needed for ACK counting
    i_allocateTBE;
    c_issueUPGRADE;
    uu_profileDataMiss;
    k_popMandatoryQueue;
  }

  transition(S, L1_Replacement, I) {
    //Silent!
    forward_eviction_to_cpu;
    ff_deallocateL1CacheBlock;
  }

  transition(S, Inv, I) {
    forward_eviction_to_cpu;
    fi_sendInvAck; // L2 has clean copy, no need to write back
    l_popRequestQueue;
  }

  // Transitions from Exclusive

  transition(E, {Load, Ifetch}) {
    h_load_hit;
    k_popMandatoryQueue;
  }

  transition(E, Store, M) {
    //Silent? Yeah...
    hh_store_hit;
    k_popMandatoryQueue;
  }

  transition(E, L1_Replacement, M_I) { // We have to wait WB_ACK from higher level, since until it comes, we're the only entity owning a value, albeit in TBE, this is not true, value is clean in E
    forward_eviction_to_cpu;
    i_allocateTBE;
    g_issuePUTX;   // send data, but hold in case forwarded request
    ff_deallocateL1CacheBlock;
  }

  transition(E, Inv, I) {
    // don't send data, not modified yet, L2 still has valid value
    forward_eviction_to_cpu;
    f_sendWBDataToL2;
    l_popRequestQueue;
  }

//  transition(E, Fwd_GETX, I) { //GETX from different core / node
//    forward_eviction_to_cpu;
//    fi_sendInvAck; // We did not modify the value, no need to WB
//    l_popRequestQueue;
//  }

//  transition(E, {Fwd_GETS, Fwd_GET_INSTR}, S) { //Same as above, but we can keep the value
//    fi_sendInvAck; // We did not modify the value, no need to WB
//    l_popRequestQueue;
//  }

  // Transitions from Modified
  transition(M, {Load, Ifetch}) { // Can satisfy
    h_load_hit;
    k_popMandatoryQueue;
  }

  transition(M, Store) { // Can satisfy
    hh_store_hit;
    k_popMandatoryQueue;
  }

  transition(M, L1_Replacement, M_I) {
    forward_eviction_to_cpu; // Obviously
    i_allocateTBE; // Why do we need TBE here?
    g_issuePUTX;   // send data, but hold in case forwarded request, since this copy is the only valid one
    ff_deallocateL1CacheBlock;
  }

  transition(M_I, WB_Ack, I) { // WB from higher level, we can ditch TBE
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents; // Wake up stalled requests
  }

  transition(M, Inv, I) { //eh? Why don't we do the same thing as in m->m_i? TOTOOTOTOTOTOODODODO changed to M_I, was I
    forward_eviction_to_cpu;
    f_sendWBDataToL2;
    l_popRequestQueue;
  }

  // Transitions from IS
  transition({IS, IS_I}, Inv, IS_I) { //lost race
    fi_sendInvAck;
    l_popRequestQueue;
  }

  transition(IS, Data, S) { // all acks for address, we can use it now
    u_writeDataToL1Cache;
    h_load_hit;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
  }

  transition(IS, Data_Exclusive, E) { // all acks for address, we can use it now
    u_writeDataToL1Cache;
    h_load_hit;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
  }

  transition(IS_I, Data, I) { //all acks for address, we can drop it now
    u_writeDataToL1Cache;
    h_load_hit;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
  }

//  transition(IS, DataS_fromL1, S) { //
//    u_writeDataToL1Cache;
//    j_sendUnblock;
//    h_load_hit;
//    s_deallocateTBE;
//    o_popIncomingResponseQueue;
//    kd_wakeUpDependents;
//  }

//  transition(IS_I, DataS_fromL1, I) {
//    u_writeDataToL1Cache;
//    j_sendUnblock;
//    h_load_hit;
//    s_deallocateTBE;
//    o_popIncomingResponseQueue;
//    kd_wakeUpDependents;
//  }

  // directory is blocked when sending exclusive data - why?
  transition(IS_I, Data_Exclusive, I) { 
    u_writeDataToL1Cache;
    h_load_hit;
//    jj_sendExclusiveUnblock;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
    f_sendWBDataToL2;
    ff_deallocateL1CacheBlock;
  }

//  transition(IS, Data_Exclusive, E) {
//    u_writeDataToL1Cache;
//    h_load_hit;
//    jj_sendExclusiveUnblock;
//    s_deallocateTBE;
//    o_popIncomingResponseQueue;
//    kd_wakeUpDependents;
//  }

  // Transitions from IM
  transition({SM}, Inv, IM_I) { //TODO used to be invack
    fi_sendInvAck;
    l_popRequestQueue;
  }

  transition({IM}, Inv, IM_I) { //TODO used to be invack
    fi_sendInvAck;
    l_popRequestQueue;
//    z_stallAndWaitRequestQueue;
  }

  

  transition(IM_I, Inv) {
l_popRequestQueue;
  }

  transition(IM_I, Data_Exclusive, I) {
    u_writeDataToL1Cache;
    hh_store_hit;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
    f_sendWBDataToL2;
    ff_deallocateL1CacheBlock;
  }
//  transition(IM, Data, SM) {
//    u_writeDataToL1Cache;
//    q_updateAckCount;
//    o_popIncomingResponseQueue;
//  }

  //simlified version
  transition(IM, Data_Exclusive, M) {
    u_writeDataToL1Cache;
    hh_store_hit;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
  }


//  transition(IM, Data_all_Acks, M) {
//    u_writeDataToL1Cache;
//    hh_store_hit;
//    jj_sendExclusiveUnblock;
//    s_deallocateTBE;
//    o_popIncomingResponseQueue;
//    kd_wakeUpDependents;
//  }

  // transitions from SM
//  transition({SM, IM}, Ack) {
//    q_updateAckCount;
//    o_popIncomingResponseQueue;
//  }

  transition(SM, Data_Exclusive, M) {
    u_writeDataToL1Cache;
    hh_store_hit;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
  }

  transition(SM, Ack, M) {
    hh_store_hit;
    s_deallocateTBE;
    o_popIncomingResponseQueue;
    kd_wakeUpDependents;
  }

  transition(I, WB_Ack) { // TODO should it be here? Investigate when you have time
    o_popIncomingResponseQueue;
  }

  transition(M_I, Inv) {
	l_popRequestQueue;
  }

  transition({IM, IS}, WB_Ack) { //bug in L2, should not send WB_Ack
	o_popIncomingResponseQueue;
  }

  transition(S, WB_Ack) {
	o_popIncomingResponseQueue;
  }

}
